// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_partition/proto/gp.proto

#ifndef PROTOBUF_graph_5fpartition_2fproto_2fgp_2eproto__INCLUDED
#define PROTOBUF_graph_5fpartition_2fproto_2fgp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace GP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
void protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto();
void protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto();

class Config;
class ParsaConfig;
class Call;

enum Call_Command {
  Call_Command_PARTITION_U_STAGE_0 = 1,
  Call_Command_PARTITION_U_STAGE_1 = 2,
  Call_Command_PARTITION_V = 3
};
bool Call_Command_IsValid(int value);
const Call_Command Call_Command_Command_MIN = Call_Command_PARTITION_U_STAGE_0;
const Call_Command Call_Command_Command_MAX = Call_Command_PARTITION_V;
const int Call_Command_Command_ARRAYSIZE = Call_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Command_descriptor();
inline const ::std::string& Call_Command_Name(Call_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Command_descriptor(), value);
}
inline bool Call_Command_Parse(
    const ::std::string& name, Call_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Command>(
    Call_Command_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.DataConfig input_graph = 1;
  inline bool has_input_graph() const;
  inline void clear_input_graph();
  static const int kInputGraphFieldNumber = 1;
  inline const ::PS::DataConfig& input_graph() const;
  inline ::PS::DataConfig* mutable_input_graph();
  inline ::PS::DataConfig* release_input_graph();
  inline void set_allocated_input_graph(::PS::DataConfig* input_graph);

  // optional .PS.DataConfig output_graph = 2;
  inline bool has_output_graph() const;
  inline void clear_output_graph();
  static const int kOutputGraphFieldNumber = 2;
  inline const ::PS::DataConfig& output_graph() const;
  inline ::PS::DataConfig* mutable_output_graph();
  inline ::PS::DataConfig* release_output_graph();
  inline void set_allocated_output_graph(::PS::DataConfig* output_graph);

  // optional .PS.GP.ParsaConfig parsa = 3;
  inline bool has_parsa() const;
  inline void clear_parsa();
  static const int kParsaFieldNumber = 3;
  inline const ::PS::GP::ParsaConfig& parsa() const;
  inline ::PS::GP::ParsaConfig* mutable_parsa();
  inline ::PS::GP::ParsaConfig* release_parsa();
  inline void set_allocated_parsa(::PS::GP::ParsaConfig* parsa);

  // @@protoc_insertion_point(class_scope:PS.GP.Config)
 private:
  inline void set_has_input_graph();
  inline void clear_has_input_graph();
  inline void set_has_output_graph();
  inline void clear_has_output_graph();
  inline void set_has_parsa();
  inline void clear_has_parsa();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::DataConfig* input_graph_;
  ::PS::DataConfig* output_graph_;
  ::PS::GP::ParsaConfig* parsa_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class ParsaConfig : public ::google::protobuf::Message {
 public:
  ParsaConfig();
  virtual ~ParsaConfig();

  ParsaConfig(const ParsaConfig& from);

  inline ParsaConfig& operator=(const ParsaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParsaConfig& default_instance();

  void Swap(ParsaConfig* other);

  // implements Message ----------------------------------------------

  ParsaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParsaConfig& from);
  void MergeFrom(const ParsaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_partitions = 1 [default = 8];
  inline bool has_num_partitions() const;
  inline void clear_num_partitions();
  static const int kNumPartitionsFieldNumber = 1;
  inline ::google::protobuf::int32 num_partitions() const;
  inline void set_num_partitions(::google::protobuf::int32 value);

  // optional int32 stage0_block_size = 4 [default = 100000];
  inline bool has_stage0_block_size() const;
  inline void clear_stage0_block_size();
  static const int kStage0BlockSizeFieldNumber = 4;
  inline ::google::protobuf::int32 stage0_block_size() const;
  inline void set_stage0_block_size(::google::protobuf::int32 value);

  // optional int32 stage0_blocks = 5 [default = 0];
  inline bool has_stage0_blocks() const;
  inline void clear_stage0_blocks();
  static const int kStage0BlocksFieldNumber = 5;
  inline ::google::protobuf::int32 stage0_blocks() const;
  inline void set_stage0_blocks(::google::protobuf::int32 value);

  // optional int32 stage0_warm_up_blocks = 6 [default = 0];
  inline bool has_stage0_warm_up_blocks() const;
  inline void clear_stage0_warm_up_blocks();
  static const int kStage0WarmUpBlocksFieldNumber = 6;
  inline ::google::protobuf::int32 stage0_warm_up_blocks() const;
  inline void set_stage0_warm_up_blocks(::google::protobuf::int32 value);

  // optional int32 stage1_block_size = 7 [default = 100000];
  inline bool has_stage1_block_size() const;
  inline void clear_stage1_block_size();
  static const int kStage1BlockSizeFieldNumber = 7;
  inline ::google::protobuf::int32 stage1_block_size() const;
  inline void set_stage1_block_size(::google::protobuf::int32 value);

  // optional int32 stage1_blocks = 14 [default = 10000000];
  inline bool has_stage1_blocks() const;
  inline void clear_stage1_blocks();
  static const int kStage1BlocksFieldNumber = 14;
  inline ::google::protobuf::int32 stage1_blocks() const;
  inline void set_stage1_blocks(::google::protobuf::int32 value);

  // optional int32 stage1_warm_up_blocks = 8 [default = 0];
  inline bool has_stage1_warm_up_blocks() const;
  inline void clear_stage1_warm_up_blocks();
  static const int kStage1WarmUpBlocksFieldNumber = 8;
  inline ::google::protobuf::int32 stage1_warm_up_blocks() const;
  inline void set_stage1_warm_up_blocks(::google::protobuf::int32 value);

  // optional int32 max_cached_cost_value = 9 [default = 100];
  inline bool has_max_cached_cost_value() const;
  inline void clear_max_cached_cost_value();
  static const int kMaxCachedCostValueFieldNumber = 9;
  inline ::google::protobuf::int32 max_cached_cost_value() const;
  inline void set_max_cached_cost_value(::google::protobuf::int32 value);

  // optional int32 data_buff_size_in_MB = 10 [default = 1000];
  inline bool has_data_buff_size_in_mb() const;
  inline void clear_data_buff_size_in_mb();
  static const int kDataBuffSizeInMBFieldNumber = 10;
  inline ::google::protobuf::int32 data_buff_size_in_mb() const;
  inline void set_data_buff_size_in_mb(::google::protobuf::int32 value);

  // optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
  inline bool has_clear_nbset_per_num_blocks() const;
  inline void clear_clear_nbset_per_num_blocks();
  static const int kClearNbsetPerNumBlocksFieldNumber = 13;
  inline ::google::protobuf::int32 clear_nbset_per_num_blocks() const;
  inline void set_clear_nbset_per_num_blocks(::google::protobuf::int32 value);

  // optional bool randomly_partition_U = 11 [default = false];
  inline bool has_randomly_partition_u() const;
  inline void clear_randomly_partition_u();
  static const int kRandomlyPartitionUFieldNumber = 11;
  inline bool randomly_partition_u() const;
  inline void set_randomly_partition_u(bool value);

  // optional bool randomly_partition_V = 12 [default = false];
  inline bool has_randomly_partition_v() const;
  inline void clear_randomly_partition_v();
  static const int kRandomlyPartitionVFieldNumber = 12;
  inline bool randomly_partition_v() const;
  inline void set_randomly_partition_v(bool value);

  // optional bool validate = 15 [default = false];
  inline bool has_validate() const;
  inline void clear_validate();
  static const int kValidateFieldNumber = 15;
  inline bool validate() const;
  inline void set_validate(bool value);

  // @@protoc_insertion_point(class_scope:PS.GP.ParsaConfig)
 private:
  inline void set_has_num_partitions();
  inline void clear_has_num_partitions();
  inline void set_has_stage0_block_size();
  inline void clear_has_stage0_block_size();
  inline void set_has_stage0_blocks();
  inline void clear_has_stage0_blocks();
  inline void set_has_stage0_warm_up_blocks();
  inline void clear_has_stage0_warm_up_blocks();
  inline void set_has_stage1_block_size();
  inline void clear_has_stage1_block_size();
  inline void set_has_stage1_blocks();
  inline void clear_has_stage1_blocks();
  inline void set_has_stage1_warm_up_blocks();
  inline void clear_has_stage1_warm_up_blocks();
  inline void set_has_max_cached_cost_value();
  inline void clear_has_max_cached_cost_value();
  inline void set_has_data_buff_size_in_mb();
  inline void clear_has_data_buff_size_in_mb();
  inline void set_has_clear_nbset_per_num_blocks();
  inline void clear_has_clear_nbset_per_num_blocks();
  inline void set_has_randomly_partition_u();
  inline void clear_has_randomly_partition_u();
  inline void set_has_randomly_partition_v();
  inline void clear_has_randomly_partition_v();
  inline void set_has_validate();
  inline void clear_has_validate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_partitions_;
  ::google::protobuf::int32 stage0_block_size_;
  ::google::protobuf::int32 stage0_blocks_;
  ::google::protobuf::int32 stage0_warm_up_blocks_;
  ::google::protobuf::int32 stage1_block_size_;
  ::google::protobuf::int32 stage1_blocks_;
  ::google::protobuf::int32 stage1_warm_up_blocks_;
  ::google::protobuf::int32 max_cached_cost_value_;
  ::google::protobuf::int32 data_buff_size_in_mb_;
  ::google::protobuf::int32 clear_nbset_per_num_blocks_;
  bool randomly_partition_u_;
  bool randomly_partition_v_;
  bool validate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto();

  void InitAsDefaultInstance();
  static ParsaConfig* default_instance_;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  void Swap(Call* other);

  // implements Message ----------------------------------------------

  Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Call_Command Command;
  static const Command PARTITION_U_STAGE_0 = Call_Command_PARTITION_U_STAGE_0;
  static const Command PARTITION_U_STAGE_1 = Call_Command_PARTITION_U_STAGE_1;
  static const Command PARTITION_V = Call_Command_PARTITION_V;
  static inline bool Command_IsValid(int value) {
    return Call_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Call_Command_Command_MIN;
  static const Command Command_MAX =
    Call_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Call_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Call_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Call_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Call_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.GP.Call.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::GP::Call_Command cmd() const;
  inline void set_cmd(::PS::GP::Call_Command value);

  // @@protoc_insertion_point(class_scope:PS.GP.Call)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  friend void protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto();

  void InitAsDefaultInstance();
  static Call* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional .PS.DataConfig input_graph = 1;
inline bool Config::has_input_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_input_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_input_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_input_graph() {
  if (input_graph_ != NULL) input_graph_->::PS::DataConfig::Clear();
  clear_has_input_graph();
}
inline const ::PS::DataConfig& Config::input_graph() const {
  return input_graph_ != NULL ? *input_graph_ : *default_instance_->input_graph_;
}
inline ::PS::DataConfig* Config::mutable_input_graph() {
  set_has_input_graph();
  if (input_graph_ == NULL) input_graph_ = new ::PS::DataConfig;
  return input_graph_;
}
inline ::PS::DataConfig* Config::release_input_graph() {
  clear_has_input_graph();
  ::PS::DataConfig* temp = input_graph_;
  input_graph_ = NULL;
  return temp;
}
inline void Config::set_allocated_input_graph(::PS::DataConfig* input_graph) {
  delete input_graph_;
  input_graph_ = input_graph;
  if (input_graph) {
    set_has_input_graph();
  } else {
    clear_has_input_graph();
  }
}

// optional .PS.DataConfig output_graph = 2;
inline bool Config::has_output_graph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_output_graph() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_output_graph() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_output_graph() {
  if (output_graph_ != NULL) output_graph_->::PS::DataConfig::Clear();
  clear_has_output_graph();
}
inline const ::PS::DataConfig& Config::output_graph() const {
  return output_graph_ != NULL ? *output_graph_ : *default_instance_->output_graph_;
}
inline ::PS::DataConfig* Config::mutable_output_graph() {
  set_has_output_graph();
  if (output_graph_ == NULL) output_graph_ = new ::PS::DataConfig;
  return output_graph_;
}
inline ::PS::DataConfig* Config::release_output_graph() {
  clear_has_output_graph();
  ::PS::DataConfig* temp = output_graph_;
  output_graph_ = NULL;
  return temp;
}
inline void Config::set_allocated_output_graph(::PS::DataConfig* output_graph) {
  delete output_graph_;
  output_graph_ = output_graph;
  if (output_graph) {
    set_has_output_graph();
  } else {
    clear_has_output_graph();
  }
}

// optional .PS.GP.ParsaConfig parsa = 3;
inline bool Config::has_parsa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_parsa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_parsa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_parsa() {
  if (parsa_ != NULL) parsa_->::PS::GP::ParsaConfig::Clear();
  clear_has_parsa();
}
inline const ::PS::GP::ParsaConfig& Config::parsa() const {
  return parsa_ != NULL ? *parsa_ : *default_instance_->parsa_;
}
inline ::PS::GP::ParsaConfig* Config::mutable_parsa() {
  set_has_parsa();
  if (parsa_ == NULL) parsa_ = new ::PS::GP::ParsaConfig;
  return parsa_;
}
inline ::PS::GP::ParsaConfig* Config::release_parsa() {
  clear_has_parsa();
  ::PS::GP::ParsaConfig* temp = parsa_;
  parsa_ = NULL;
  return temp;
}
inline void Config::set_allocated_parsa(::PS::GP::ParsaConfig* parsa) {
  delete parsa_;
  parsa_ = parsa;
  if (parsa) {
    set_has_parsa();
  } else {
    clear_has_parsa();
  }
}

// -------------------------------------------------------------------

// ParsaConfig

// optional int32 num_partitions = 1 [default = 8];
inline bool ParsaConfig::has_num_partitions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParsaConfig::set_has_num_partitions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParsaConfig::clear_has_num_partitions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParsaConfig::clear_num_partitions() {
  num_partitions_ = 8;
  clear_has_num_partitions();
}
inline ::google::protobuf::int32 ParsaConfig::num_partitions() const {
  return num_partitions_;
}
inline void ParsaConfig::set_num_partitions(::google::protobuf::int32 value) {
  set_has_num_partitions();
  num_partitions_ = value;
}

// optional int32 stage0_block_size = 4 [default = 100000];
inline bool ParsaConfig::has_stage0_block_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParsaConfig::set_has_stage0_block_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParsaConfig::clear_has_stage0_block_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParsaConfig::clear_stage0_block_size() {
  stage0_block_size_ = 100000;
  clear_has_stage0_block_size();
}
inline ::google::protobuf::int32 ParsaConfig::stage0_block_size() const {
  return stage0_block_size_;
}
inline void ParsaConfig::set_stage0_block_size(::google::protobuf::int32 value) {
  set_has_stage0_block_size();
  stage0_block_size_ = value;
}

// optional int32 stage0_blocks = 5 [default = 0];
inline bool ParsaConfig::has_stage0_blocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParsaConfig::set_has_stage0_blocks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParsaConfig::clear_has_stage0_blocks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParsaConfig::clear_stage0_blocks() {
  stage0_blocks_ = 0;
  clear_has_stage0_blocks();
}
inline ::google::protobuf::int32 ParsaConfig::stage0_blocks() const {
  return stage0_blocks_;
}
inline void ParsaConfig::set_stage0_blocks(::google::protobuf::int32 value) {
  set_has_stage0_blocks();
  stage0_blocks_ = value;
}

// optional int32 stage0_warm_up_blocks = 6 [default = 0];
inline bool ParsaConfig::has_stage0_warm_up_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParsaConfig::set_has_stage0_warm_up_blocks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParsaConfig::clear_has_stage0_warm_up_blocks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParsaConfig::clear_stage0_warm_up_blocks() {
  stage0_warm_up_blocks_ = 0;
  clear_has_stage0_warm_up_blocks();
}
inline ::google::protobuf::int32 ParsaConfig::stage0_warm_up_blocks() const {
  return stage0_warm_up_blocks_;
}
inline void ParsaConfig::set_stage0_warm_up_blocks(::google::protobuf::int32 value) {
  set_has_stage0_warm_up_blocks();
  stage0_warm_up_blocks_ = value;
}

// optional int32 stage1_block_size = 7 [default = 100000];
inline bool ParsaConfig::has_stage1_block_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParsaConfig::set_has_stage1_block_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParsaConfig::clear_has_stage1_block_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParsaConfig::clear_stage1_block_size() {
  stage1_block_size_ = 100000;
  clear_has_stage1_block_size();
}
inline ::google::protobuf::int32 ParsaConfig::stage1_block_size() const {
  return stage1_block_size_;
}
inline void ParsaConfig::set_stage1_block_size(::google::protobuf::int32 value) {
  set_has_stage1_block_size();
  stage1_block_size_ = value;
}

// optional int32 stage1_blocks = 14 [default = 10000000];
inline bool ParsaConfig::has_stage1_blocks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParsaConfig::set_has_stage1_blocks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParsaConfig::clear_has_stage1_blocks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParsaConfig::clear_stage1_blocks() {
  stage1_blocks_ = 10000000;
  clear_has_stage1_blocks();
}
inline ::google::protobuf::int32 ParsaConfig::stage1_blocks() const {
  return stage1_blocks_;
}
inline void ParsaConfig::set_stage1_blocks(::google::protobuf::int32 value) {
  set_has_stage1_blocks();
  stage1_blocks_ = value;
}

// optional int32 stage1_warm_up_blocks = 8 [default = 0];
inline bool ParsaConfig::has_stage1_warm_up_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParsaConfig::set_has_stage1_warm_up_blocks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParsaConfig::clear_has_stage1_warm_up_blocks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParsaConfig::clear_stage1_warm_up_blocks() {
  stage1_warm_up_blocks_ = 0;
  clear_has_stage1_warm_up_blocks();
}
inline ::google::protobuf::int32 ParsaConfig::stage1_warm_up_blocks() const {
  return stage1_warm_up_blocks_;
}
inline void ParsaConfig::set_stage1_warm_up_blocks(::google::protobuf::int32 value) {
  set_has_stage1_warm_up_blocks();
  stage1_warm_up_blocks_ = value;
}

// optional int32 max_cached_cost_value = 9 [default = 100];
inline bool ParsaConfig::has_max_cached_cost_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParsaConfig::set_has_max_cached_cost_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParsaConfig::clear_has_max_cached_cost_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParsaConfig::clear_max_cached_cost_value() {
  max_cached_cost_value_ = 100;
  clear_has_max_cached_cost_value();
}
inline ::google::protobuf::int32 ParsaConfig::max_cached_cost_value() const {
  return max_cached_cost_value_;
}
inline void ParsaConfig::set_max_cached_cost_value(::google::protobuf::int32 value) {
  set_has_max_cached_cost_value();
  max_cached_cost_value_ = value;
}

// optional int32 data_buff_size_in_MB = 10 [default = 1000];
inline bool ParsaConfig::has_data_buff_size_in_mb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParsaConfig::set_has_data_buff_size_in_mb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParsaConfig::clear_has_data_buff_size_in_mb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParsaConfig::clear_data_buff_size_in_mb() {
  data_buff_size_in_mb_ = 1000;
  clear_has_data_buff_size_in_mb();
}
inline ::google::protobuf::int32 ParsaConfig::data_buff_size_in_mb() const {
  return data_buff_size_in_mb_;
}
inline void ParsaConfig::set_data_buff_size_in_mb(::google::protobuf::int32 value) {
  set_has_data_buff_size_in_mb();
  data_buff_size_in_mb_ = value;
}

// optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
inline bool ParsaConfig::has_clear_nbset_per_num_blocks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParsaConfig::set_has_clear_nbset_per_num_blocks() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParsaConfig::clear_has_clear_nbset_per_num_blocks() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParsaConfig::clear_clear_nbset_per_num_blocks() {
  clear_nbset_per_num_blocks_ = 1;
  clear_has_clear_nbset_per_num_blocks();
}
inline ::google::protobuf::int32 ParsaConfig::clear_nbset_per_num_blocks() const {
  return clear_nbset_per_num_blocks_;
}
inline void ParsaConfig::set_clear_nbset_per_num_blocks(::google::protobuf::int32 value) {
  set_has_clear_nbset_per_num_blocks();
  clear_nbset_per_num_blocks_ = value;
}

// optional bool randomly_partition_U = 11 [default = false];
inline bool ParsaConfig::has_randomly_partition_u() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParsaConfig::set_has_randomly_partition_u() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParsaConfig::clear_has_randomly_partition_u() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParsaConfig::clear_randomly_partition_u() {
  randomly_partition_u_ = false;
  clear_has_randomly_partition_u();
}
inline bool ParsaConfig::randomly_partition_u() const {
  return randomly_partition_u_;
}
inline void ParsaConfig::set_randomly_partition_u(bool value) {
  set_has_randomly_partition_u();
  randomly_partition_u_ = value;
}

// optional bool randomly_partition_V = 12 [default = false];
inline bool ParsaConfig::has_randomly_partition_v() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParsaConfig::set_has_randomly_partition_v() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParsaConfig::clear_has_randomly_partition_v() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParsaConfig::clear_randomly_partition_v() {
  randomly_partition_v_ = false;
  clear_has_randomly_partition_v();
}
inline bool ParsaConfig::randomly_partition_v() const {
  return randomly_partition_v_;
}
inline void ParsaConfig::set_randomly_partition_v(bool value) {
  set_has_randomly_partition_v();
  randomly_partition_v_ = value;
}

// optional bool validate = 15 [default = false];
inline bool ParsaConfig::has_validate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParsaConfig::set_has_validate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParsaConfig::clear_has_validate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParsaConfig::clear_validate() {
  validate_ = false;
  clear_has_validate();
}
inline bool ParsaConfig::validate() const {
  return validate_;
}
inline void ParsaConfig::set_validate(bool value) {
  set_has_validate();
  validate_ = value;
}

// -------------------------------------------------------------------

// Call

// required .PS.GP.Call.Command cmd = 1;
inline bool Call::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::GP::Call_Command Call::cmd() const {
  return static_cast< ::PS::GP::Call_Command >(cmd_);
}
inline void Call::set_cmd(::PS::GP::Call_Command value) {
  assert(::PS::GP::Call_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GP
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::GP::Call_Command>() {
  return ::PS::GP::Call_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_5fpartition_2fproto_2fgp_2eproto__INCLUDED
