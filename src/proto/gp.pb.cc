// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_partition/proto/gp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graph_partition/proto/gp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {
namespace GP {

namespace {

const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParsaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParsaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Call_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto() {
  protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graph_partition/proto/gp.proto");
  GOOGLE_CHECK(file != NULL);
  Config_descriptor_ = file->message_type(0);
  static const int Config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, input_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, output_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, parsa_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  ParsaConfig_descriptor_ = file->message_type(1);
  static const int ParsaConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, num_partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage0_block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage0_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage0_warm_up_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage1_block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage1_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, stage1_warm_up_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, max_cached_cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, data_buff_size_in_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, clear_nbset_per_num_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, randomly_partition_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, randomly_partition_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, validate_),
  };
  ParsaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParsaConfig_descriptor_,
      ParsaConfig::default_instance_,
      ParsaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParsaConfig));
  Call_descriptor_ = file->message_type(2);
  static const int Call_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, cmd_),
  };
  Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_descriptor_,
      Call::default_instance_,
      Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call));
  Call_Command_descriptor_ = Call_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graph_5fpartition_2fproto_2fgp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParsaConfig_descriptor_, &ParsaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_descriptor_, &Call::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto() {
  delete Config::default_instance_;
  delete Config_reflection_;
  delete ParsaConfig::default_instance_;
  delete ParsaConfig_reflection_;
  delete Call::default_instance_;
  delete Call_reflection_;
}

void protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036graph_partition/proto/gp.proto\022\005PS.GP\032"
    "\025data/proto/data.proto\"v\n\006Config\022#\n\013inpu"
    "t_graph\030\001 \001(\0132\016.PS.DataConfig\022$\n\014output_"
    "graph\030\002 \001(\0132\016.PS.DataConfig\022!\n\005parsa\030\003 \001"
    "(\0132\022.PS.GP.ParsaConfig\"\277\003\n\013ParsaConfig\022\031"
    "\n\016num_partitions\030\001 \001(\005:\0018\022!\n\021stage0_bloc"
    "k_size\030\004 \001(\005:\006100000\022\030\n\rstage0_blocks\030\005 "
    "\001(\005:\0010\022 \n\025stage0_warm_up_blocks\030\006 \001(\005:\0010"
    "\022!\n\021stage1_block_size\030\007 \001(\005:\006100000\022\037\n\rs"
    "tage1_blocks\030\016 \001(\005:\01010000000\022 \n\025stage1_w"
    "arm_up_blocks\030\010 \001(\005:\0010\022\"\n\025max_cached_cos"
    "t_value\030\t \001(\005:\003100\022\"\n\024data_buff_size_in_"
    "MB\030\n \001(\005:\0041000\022%\n\032clear_nbset_per_num_bl"
    "ocks\030\r \001(\005:\0011\022#\n\024randomly_partition_U\030\013 "
    "\001(\010:\005false\022#\n\024randomly_partition_V\030\014 \001(\010"
    ":\005false\022\027\n\010validate\030\017 \001(\010:\005false\"v\n\004Call"
    "\022 \n\003cmd\030\001 \002(\0162\023.PS.GP.Call.Command\"L\n\007Co"
    "mmand\022\027\n\023PARTITION_U_STAGE_0\020\001\022\027\n\023PARTIT"
    "ION_U_STAGE_1\020\002\022\017\n\013PARTITION_V\020\003", 752);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graph_partition/proto/gp.proto", &protobuf_RegisterTypes);
  Config::default_instance_ = new Config();
  ParsaConfig::default_instance_ = new ParsaConfig();
  Call::default_instance_ = new Call();
  Config::default_instance_->InitAsDefaultInstance();
  ParsaConfig::default_instance_->InitAsDefaultInstance();
  Call::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graph_5fpartition_2fproto_2fgp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graph_5fpartition_2fproto_2fgp_2eproto {
  StaticDescriptorInitializer_graph_5fpartition_2fproto_2fgp_2eproto() {
    protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  }
} static_descriptor_initializer_graph_5fpartition_2fproto_2fgp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Config::kInputGraphFieldNumber;
const int Config::kOutputGraphFieldNumber;
const int Config::kParsaFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
  input_graph_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  output_graph_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  parsa_ = const_cast< ::PS::GP::ParsaConfig*>(&::PS::GP::ParsaConfig::default_instance());
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  input_graph_ = NULL;
  output_graph_ = NULL;
  parsa_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
    delete input_graph_;
    delete output_graph_;
    delete parsa_;
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_input_graph()) {
      if (input_graph_ != NULL) input_graph_->::PS::DataConfig::Clear();
    }
    if (has_output_graph()) {
      if (output_graph_ != NULL) output_graph_->::PS::DataConfig::Clear();
    }
    if (has_parsa()) {
      if (parsa_ != NULL) parsa_->::PS::GP::ParsaConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.DataConfig input_graph = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_graph()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output_graph;
        break;
      }

      // optional .PS.DataConfig output_graph = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_graph()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parsa;
        break;
      }

      // optional .PS.GP.ParsaConfig parsa = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parsa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.DataConfig input_graph = 1;
  if (has_input_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input_graph(), output);
  }

  // optional .PS.DataConfig output_graph = 2;
  if (has_output_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output_graph(), output);
  }

  // optional .PS.GP.ParsaConfig parsa = 3;
  if (has_parsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parsa(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.DataConfig input_graph = 1;
  if (has_input_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input_graph(), target);
  }

  // optional .PS.DataConfig output_graph = 2;
  if (has_output_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output_graph(), target);
  }

  // optional .PS.GP.ParsaConfig parsa = 3;
  if (has_parsa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parsa(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.DataConfig input_graph = 1;
    if (has_input_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_graph());
    }

    // optional .PS.DataConfig output_graph = 2;
    if (has_output_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output_graph());
    }

    // optional .PS.GP.ParsaConfig parsa = 3;
    if (has_parsa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsa());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_graph()) {
      mutable_input_graph()->::PS::DataConfig::MergeFrom(from.input_graph());
    }
    if (from.has_output_graph()) {
      mutable_output_graph()->::PS::DataConfig::MergeFrom(from.output_graph());
    }
    if (from.has_parsa()) {
      mutable_parsa()->::PS::GP::ParsaConfig::MergeFrom(from.parsa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  if (has_input_graph()) {
    if (!this->input_graph().IsInitialized()) return false;
  }
  if (has_output_graph()) {
    if (!this->output_graph().IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(input_graph_, other->input_graph_);
    std::swap(output_graph_, other->output_graph_);
    std::swap(parsa_, other->parsa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParsaConfig::kNumPartitionsFieldNumber;
const int ParsaConfig::kStage0BlockSizeFieldNumber;
const int ParsaConfig::kStage0BlocksFieldNumber;
const int ParsaConfig::kStage0WarmUpBlocksFieldNumber;
const int ParsaConfig::kStage1BlockSizeFieldNumber;
const int ParsaConfig::kStage1BlocksFieldNumber;
const int ParsaConfig::kStage1WarmUpBlocksFieldNumber;
const int ParsaConfig::kMaxCachedCostValueFieldNumber;
const int ParsaConfig::kDataBuffSizeInMBFieldNumber;
const int ParsaConfig::kClearNbsetPerNumBlocksFieldNumber;
const int ParsaConfig::kRandomlyPartitionUFieldNumber;
const int ParsaConfig::kRandomlyPartitionVFieldNumber;
const int ParsaConfig::kValidateFieldNumber;
#endif  // !_MSC_VER

ParsaConfig::ParsaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParsaConfig::InitAsDefaultInstance() {
}

ParsaConfig::ParsaConfig(const ParsaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParsaConfig::SharedCtor() {
  _cached_size_ = 0;
  num_partitions_ = 8;
  stage0_block_size_ = 100000;
  stage0_blocks_ = 0;
  stage0_warm_up_blocks_ = 0;
  stage1_block_size_ = 100000;
  stage1_blocks_ = 10000000;
  stage1_warm_up_blocks_ = 0;
  max_cached_cost_value_ = 100;
  data_buff_size_in_mb_ = 1000;
  clear_nbset_per_num_blocks_ = 1;
  randomly_partition_u_ = false;
  randomly_partition_v_ = false;
  validate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParsaConfig::~ParsaConfig() {
  SharedDtor();
}

void ParsaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParsaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParsaConfig_descriptor_;
}

const ParsaConfig& ParsaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  return *default_instance_;
}

ParsaConfig* ParsaConfig::default_instance_ = NULL;

ParsaConfig* ParsaConfig::New() const {
  return new ParsaConfig;
}

void ParsaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_partitions_ = 8;
    stage0_block_size_ = 100000;
    stage0_blocks_ = 0;
    stage0_warm_up_blocks_ = 0;
    stage1_block_size_ = 100000;
    stage1_blocks_ = 10000000;
    stage1_warm_up_blocks_ = 0;
    max_cached_cost_value_ = 100;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    data_buff_size_in_mb_ = 1000;
    clear_nbset_per_num_blocks_ = 1;
    randomly_partition_u_ = false;
    randomly_partition_v_ = false;
    validate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParsaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_partitions = 1 [default = 8];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_partitions_)));
          set_has_num_partitions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage0_block_size;
        break;
      }

      // optional int32 stage0_block_size = 4 [default = 100000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage0_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage0_block_size_)));
          set_has_stage0_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stage0_blocks;
        break;
      }

      // optional int32 stage0_blocks = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage0_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage0_blocks_)));
          set_has_stage0_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stage0_warm_up_blocks;
        break;
      }

      // optional int32 stage0_warm_up_blocks = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage0_warm_up_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage0_warm_up_blocks_)));
          set_has_stage0_warm_up_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stage1_block_size;
        break;
      }

      // optional int32 stage1_block_size = 7 [default = 100000];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage1_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage1_block_size_)));
          set_has_stage1_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stage1_warm_up_blocks;
        break;
      }

      // optional int32 stage1_warm_up_blocks = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage1_warm_up_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage1_warm_up_blocks_)));
          set_has_stage1_warm_up_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_cached_cost_value;
        break;
      }

      // optional int32 max_cached_cost_value = 9 [default = 100];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cached_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cached_cost_value_)));
          set_has_max_cached_cost_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_data_buff_size_in_MB;
        break;
      }

      // optional int32 data_buff_size_in_MB = 10 [default = 1000];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_buff_size_in_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_buff_size_in_mb_)));
          set_has_data_buff_size_in_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_randomly_partition_U;
        break;
      }

      // optional bool randomly_partition_U = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomly_partition_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomly_partition_u_)));
          set_has_randomly_partition_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_randomly_partition_V;
        break;
      }

      // optional bool randomly_partition_V = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomly_partition_V:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomly_partition_v_)));
          set_has_randomly_partition_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_clear_nbset_per_num_blocks;
        break;
      }

      // optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear_nbset_per_num_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_nbset_per_num_blocks_)));
          set_has_clear_nbset_per_num_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_stage1_blocks;
        break;
      }

      // optional int32 stage1_blocks = 14 [default = 10000000];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage1_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage1_blocks_)));
          set_has_stage1_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_validate;
        break;
      }

      // optional bool validate = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validate_)));
          set_has_validate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParsaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_partitions = 1 [default = 8];
  if (has_num_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_partitions(), output);
  }

  // optional int32 stage0_block_size = 4 [default = 100000];
  if (has_stage0_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stage0_block_size(), output);
  }

  // optional int32 stage0_blocks = 5 [default = 0];
  if (has_stage0_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stage0_blocks(), output);
  }

  // optional int32 stage0_warm_up_blocks = 6 [default = 0];
  if (has_stage0_warm_up_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stage0_warm_up_blocks(), output);
  }

  // optional int32 stage1_block_size = 7 [default = 100000];
  if (has_stage1_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stage1_block_size(), output);
  }

  // optional int32 stage1_warm_up_blocks = 8 [default = 0];
  if (has_stage1_warm_up_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stage1_warm_up_blocks(), output);
  }

  // optional int32 max_cached_cost_value = 9 [default = 100];
  if (has_max_cached_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_cached_cost_value(), output);
  }

  // optional int32 data_buff_size_in_MB = 10 [default = 1000];
  if (has_data_buff_size_in_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->data_buff_size_in_mb(), output);
  }

  // optional bool randomly_partition_U = 11 [default = false];
  if (has_randomly_partition_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->randomly_partition_u(), output);
  }

  // optional bool randomly_partition_V = 12 [default = false];
  if (has_randomly_partition_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->randomly_partition_v(), output);
  }

  // optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
  if (has_clear_nbset_per_num_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->clear_nbset_per_num_blocks(), output);
  }

  // optional int32 stage1_blocks = 14 [default = 10000000];
  if (has_stage1_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->stage1_blocks(), output);
  }

  // optional bool validate = 15 [default = false];
  if (has_validate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->validate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParsaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_partitions = 1 [default = 8];
  if (has_num_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_partitions(), target);
  }

  // optional int32 stage0_block_size = 4 [default = 100000];
  if (has_stage0_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stage0_block_size(), target);
  }

  // optional int32 stage0_blocks = 5 [default = 0];
  if (has_stage0_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stage0_blocks(), target);
  }

  // optional int32 stage0_warm_up_blocks = 6 [default = 0];
  if (has_stage0_warm_up_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stage0_warm_up_blocks(), target);
  }

  // optional int32 stage1_block_size = 7 [default = 100000];
  if (has_stage1_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stage1_block_size(), target);
  }

  // optional int32 stage1_warm_up_blocks = 8 [default = 0];
  if (has_stage1_warm_up_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stage1_warm_up_blocks(), target);
  }

  // optional int32 max_cached_cost_value = 9 [default = 100];
  if (has_max_cached_cost_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_cached_cost_value(), target);
  }

  // optional int32 data_buff_size_in_MB = 10 [default = 1000];
  if (has_data_buff_size_in_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->data_buff_size_in_mb(), target);
  }

  // optional bool randomly_partition_U = 11 [default = false];
  if (has_randomly_partition_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->randomly_partition_u(), target);
  }

  // optional bool randomly_partition_V = 12 [default = false];
  if (has_randomly_partition_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->randomly_partition_v(), target);
  }

  // optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
  if (has_clear_nbset_per_num_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->clear_nbset_per_num_blocks(), target);
  }

  // optional int32 stage1_blocks = 14 [default = 10000000];
  if (has_stage1_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->stage1_blocks(), target);
  }

  // optional bool validate = 15 [default = false];
  if (has_validate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->validate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParsaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_partitions = 1 [default = 8];
    if (has_num_partitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_partitions());
    }

    // optional int32 stage0_block_size = 4 [default = 100000];
    if (has_stage0_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage0_block_size());
    }

    // optional int32 stage0_blocks = 5 [default = 0];
    if (has_stage0_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage0_blocks());
    }

    // optional int32 stage0_warm_up_blocks = 6 [default = 0];
    if (has_stage0_warm_up_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage0_warm_up_blocks());
    }

    // optional int32 stage1_block_size = 7 [default = 100000];
    if (has_stage1_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage1_block_size());
    }

    // optional int32 stage1_blocks = 14 [default = 10000000];
    if (has_stage1_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage1_blocks());
    }

    // optional int32 stage1_warm_up_blocks = 8 [default = 0];
    if (has_stage1_warm_up_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage1_warm_up_blocks());
    }

    // optional int32 max_cached_cost_value = 9 [default = 100];
    if (has_max_cached_cost_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cached_cost_value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 data_buff_size_in_MB = 10 [default = 1000];
    if (has_data_buff_size_in_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_buff_size_in_mb());
    }

    // optional int32 clear_nbset_per_num_blocks = 13 [default = 1];
    if (has_clear_nbset_per_num_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_nbset_per_num_blocks());
    }

    // optional bool randomly_partition_U = 11 [default = false];
    if (has_randomly_partition_u()) {
      total_size += 1 + 1;
    }

    // optional bool randomly_partition_V = 12 [default = false];
    if (has_randomly_partition_v()) {
      total_size += 1 + 1;
    }

    // optional bool validate = 15 [default = false];
    if (has_validate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParsaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParsaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParsaConfig::MergeFrom(const ParsaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_partitions()) {
      set_num_partitions(from.num_partitions());
    }
    if (from.has_stage0_block_size()) {
      set_stage0_block_size(from.stage0_block_size());
    }
    if (from.has_stage0_blocks()) {
      set_stage0_blocks(from.stage0_blocks());
    }
    if (from.has_stage0_warm_up_blocks()) {
      set_stage0_warm_up_blocks(from.stage0_warm_up_blocks());
    }
    if (from.has_stage1_block_size()) {
      set_stage1_block_size(from.stage1_block_size());
    }
    if (from.has_stage1_blocks()) {
      set_stage1_blocks(from.stage1_blocks());
    }
    if (from.has_stage1_warm_up_blocks()) {
      set_stage1_warm_up_blocks(from.stage1_warm_up_blocks());
    }
    if (from.has_max_cached_cost_value()) {
      set_max_cached_cost_value(from.max_cached_cost_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_buff_size_in_mb()) {
      set_data_buff_size_in_mb(from.data_buff_size_in_mb());
    }
    if (from.has_clear_nbset_per_num_blocks()) {
      set_clear_nbset_per_num_blocks(from.clear_nbset_per_num_blocks());
    }
    if (from.has_randomly_partition_u()) {
      set_randomly_partition_u(from.randomly_partition_u());
    }
    if (from.has_randomly_partition_v()) {
      set_randomly_partition_v(from.randomly_partition_v());
    }
    if (from.has_validate()) {
      set_validate(from.validate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParsaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsaConfig::CopyFrom(const ParsaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsaConfig::IsInitialized() const {

  return true;
}

void ParsaConfig::Swap(ParsaConfig* other) {
  if (other != this) {
    std::swap(num_partitions_, other->num_partitions_);
    std::swap(stage0_block_size_, other->stage0_block_size_);
    std::swap(stage0_blocks_, other->stage0_blocks_);
    std::swap(stage0_warm_up_blocks_, other->stage0_warm_up_blocks_);
    std::swap(stage1_block_size_, other->stage1_block_size_);
    std::swap(stage1_blocks_, other->stage1_blocks_);
    std::swap(stage1_warm_up_blocks_, other->stage1_warm_up_blocks_);
    std::swap(max_cached_cost_value_, other->max_cached_cost_value_);
    std::swap(data_buff_size_in_mb_, other->data_buff_size_in_mb_);
    std::swap(clear_nbset_per_num_blocks_, other->clear_nbset_per_num_blocks_);
    std::swap(randomly_partition_u_, other->randomly_partition_u_);
    std::swap(randomly_partition_v_, other->randomly_partition_v_);
    std::swap(validate_, other->validate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParsaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParsaConfig_descriptor_;
  metadata.reflection = ParsaConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Call_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Command_descriptor_;
}
bool Call_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Call_Command Call::PARTITION_U_STAGE_0;
const Call_Command Call::PARTITION_U_STAGE_1;
const Call_Command Call::PARTITION_V;
const Call_Command Call::Command_MIN;
const Call_Command Call::Command_MAX;
const int Call::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Call::kCmdFieldNumber;
#endif  // !_MSC_VER

Call::Call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call::InitAsDefaultInstance() {
}

Call::Call(const Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call::~Call() {
  SharedDtor();
}

void Call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_descriptor_;
}

const Call& Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_5fpartition_2fproto_2fgp_2eproto();
  return *default_instance_;
}

Call* Call::default_instance_ = NULL;

Call* Call::New() const {
  return new Call;
}

void Call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.GP.Call.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::GP::Call_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::GP::Call_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.GP.Call.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.GP.Call.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.GP.Call.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Call::Swap(Call* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_descriptor_;
  metadata.reflection = Call_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GP
}  // namespace PS

// @@protoc_insertion_point(global_scope)
